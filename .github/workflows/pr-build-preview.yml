name: PR Build Preview (MSR site)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      # Manual PRs that touch site or templates
      - "src/site/**"
      - "src/main/templates/**"
      - "package.json"
      - "package-lock.json"
      # Extract PRs (bot): include because they change the dataset used by the site
      - "src/main/data/**"
      # MSI/MRI PRs: include to trigger previews for report changes
      - "src/main/reports/**"
  workflow_run:
    workflows:
      - "Extract SMPTE Documents"
      - "Build Master Suite Index"
      - "Build Master Reference Index"
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write

concurrency:
  group: pages-pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    if: >
      (
        github.event_name == 'pull_request'
        && github.event.pull_request.head.repo.full_name == github.repository
        && !startsWith(github.head_ref, 'gh-pages')
      )
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR for workflow_run (extract/MSI/MRI)
        if: ${{ github.event_name == 'workflow_run' }}
        id: findpr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const runName = context.payload.workflow_run && context.payload.workflow_run.name || '';
            const branchMap = {
              'Extract SMPTE Documents': 'chore/extract-docs',
              'Build Master Suite Index': 'chore/build-master-suite-index',
              'Build Master Reference Index': 'chore/build-master-reference-index'
            };
            const headBranch = branchMap[runName];
            if (!headBranch) {
              core.info(`No branch mapping for workflow_run: "${runName}".`);
              core.setOutput('number', '');
              core.setOutput('sha', '');
              core.setOutput('branch', '');
            } else {
              const { data: prs } = await github.rest.pulls.list({
                owner, repo, state: 'open', head: `${owner}:${headBranch}`, per_page: 10
              });
              const pr = prs[0];
              core.setOutput('number', pr ? pr.number : '');
              core.setOutput('sha', pr ? pr.head.sha : '');
              core.setOutput('branch', pr ? pr.head.ref : headBranch);
              core.info(`Resolved head branch: ${headBranch}; PR #: ${pr ? pr.number : '(none)'}`);
            }
      - name: Stop if no open PR for current workflow_run
        if: ${{ github.event_name == 'workflow_run' && steps.findpr.outputs.number == '' }}
        run: |
          echo "No open PR found for this workflow_run â€” nothing to preview."
          exit 0

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || steps.findpr.outputs.branch || 'main' }}

      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - run: npm ci

      - name: Canonicalize data (sanity)
        run: npm run canonicalize

      - name: Validate dataset
        run: npm run validate

      - run: npm run build   # produces ./build

      - name: Verify build output exists
        run: |
          if [ ! -d build ]; then
            echo "::error::No build/ output directory found after 'npm run build'.";
            echo "Contents of repo root:";
            ls -la;
            echo "\nLikely build output directories in top 2 levels:";
            find . -maxdepth 2 -type d -name "*dist*" -o -name "*build*" -o -name "*public*";
            exit 1;
          fi

      - name: Deploy PR preview to gh-pages/pr/<PR#>
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          destination_dir: pr/${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.findpr.outputs.number }}
          keep_files: true

      - name: Comment preview URL on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: msr-preview
          number: ${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.findpr.outputs.number }}
          message: |
            # Review link
            [MSR Build Preview](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr/${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.findpr.outputs.number }}/)
            _This link updates on new commits to this PR._ 

      - name: Publish PR Check (Preview link)
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = context.eventName === 'pull_request';
            const prNumber = isPR ? context.payload.pull_request.number : Number('${{ steps.findpr.outputs.number }}');
            if (!prNumber) { core.info('No PR number; skipping check run.'); return; }

            // Resolve SHA
            const { owner, repo } = context.repo;
            let headSha = isPR ? context.payload.pull_request.head.sha : '${{ steps.findpr.outputs.sha }}';
            if (!headSha) {
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              headSha = pr.head.sha;
            }
            if (!headSha) { core.info('No head SHA; skipping check run.'); return; }

            // Preview URL
            const url = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr/${prNumber}/`;

            // Create a check run visible on the PR
            await github.rest.checks.create({
              owner, repo,
              name: 'PR Build Preview',
              head_sha: headSha,
              status: 'completed',
              conclusion: 'success',
              details_url: url,
              output: {
                title: 'MSR Preview',
                summary: `Preview deployed for PR #${prNumber}.`,
                text: `Open the preview: ${url}`
              }
            });