name: PR Build Preview (MSR site)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      # Manual PRs that touch site or templates
      - "src/site/**"
      - "src/main/templates/**"
      - "package.json"
      - "package-lock.json"
      # Extract PRs (bot): include because they change the dataset used by the site
      - "src/main/data/**"
      # MSI/MRI PRs: include to trigger previews for report changes
      - "src/main/reports/**"
  workflow_run:
    workflows:
      - "Extract SMPTE Documents"
      - "Build MasterSuite Index"
      - "Build MasterReference Index"
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

concurrency:
  group: pages-pr-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    if: >
      (
        github.event_name == 'pull_request'
        && github.event.pull_request.head.repo.full_name == github.repository
        && !startsWith(github.head_ref, 'gh-pages')
      )
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    runs-on: ubuntu-latest
    steps:
      - name: Resolve PR for workflow_run (extract/MSI/MRI)
        if: ${{ github.event_name == 'workflow_run' }}
        id: findpr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;

            // Prefer PR(s) attached on the workflow_run payload (only present if the upstream run itself was triggered by a PR)
            const wr = context.payload.workflow_run || {};
            const attachedPRs = Array.isArray(wr.pull_requests) ? wr.pull_requests : [];
            if (attachedPRs.length > 0) {
              const prNum = attachedPRs[0].number;
              core.info(`Found attached PR #${prNum} from workflow_run payload.`);
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNum });
              core.setOutput('number', String(pr.number));
              core.setOutput('sha', pr.head.sha);
              core.setOutput('branch', pr.head.ref);
              return;
            }

            // Fallback 1: map workflow name -> expected head branch
            const runName = wr.name || '';
            const branchMap = {
              'Extract SMPTE Documents': 'chore/extract-docs',
              'Build MasterSuite Index': 'chore/build-mastersuite',           // actual branch used by MSI workflow
              'Build MasterReference Index': 'chore/build-masterreference'    // actual branch used by MRI workflow
            };
            const headBranch = branchMap[runName];
            if (headBranch) {
              const prs = await github.paginate(github.rest.pulls.list, {
                owner, repo, state: 'open', head: `${owner}:${headBranch}`, per_page: 50
              });
              const pr = prs[0];
              if (pr) {
                core.info(`Resolved by branch map: ${headBranch}; PR #${pr.number}`);
                core.setOutput('number', String(pr.number));
                core.setOutput('sha', pr.head.sha);
                core.setOutput('branch', pr.head.ref);
                return;
              } else {
                core.info(`No open PR found for head ${owner}:${headBranch}.`);
              }
            } else {
              core.info(`No branch mapping for workflow_run: "${runName}".`);
            }

            // Fallback 2: search by label (MSI/MRI PRs have stable labels)
            const labelMap = {
              'Build MasterSuite Index': 'msi',
              'Build MasterReference Index': 'mri',
              'Extract SMPTE Documents': 'extract'
            };
            const label = labelMap[runName];
            if (label) {
              const q = `repo:${owner}/${repo} is:pr is:open label:${label}`;
              const { data } = await github.rest.search.issuesAndPullRequests({ q, per_page: 10, sort: 'updated', order: 'desc' });
              const item = (data.items || [])[0];
              if (item) {
                const prNum = item.number;
                const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNum });
                core.info(`Resolved by label search '${label}': PR #${pr.number} (head ${pr.head.ref})`);
                core.setOutput('number', String(pr.number));
                core.setOutput('sha', pr.head.sha);
                core.setOutput('branch', pr.head.ref);
                return;
              } else {
                core.info(`No open PRs found with label '${label}'.`);
              }
            }

            // Nothing found — exit with empty outputs so the next step can terminate this job gracefully
            core.setOutput('number', '');
            core.setOutput('sha', '');
            core.setOutput('branch', '');

      - name: Stop if no open PR for current workflow_run
        if: ${{ github.event_name == 'workflow_run' && steps.findpr.outputs.number == '' }}
        run: |
          echo "No open PR found for this workflow_run — nothing to preview."
          exit 0

      - name: Debug resolved PR context
        if: ${{ github.event_name == 'workflow_run' && steps.findpr.outputs.number != '' }}
        run: |
          echo "Resolved PR #: ${{ steps.findpr.outputs.number }}"
          echo "Resolved head ref: ${{ steps.findpr.outputs.branch }}"
          echo "Resolved head sha: ${{ steps.findpr.outputs.sha }}"

      - name: Start Preview check (in_progress)
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        id: start_check
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = context.eventName === 'pull_request';
            const prNumber = isPR ? context.payload.pull_request.number : Number('${{ steps.findpr.outputs.number }}');
            if (!prNumber) { core.info('No PR number; not starting check.'); return; }
            const { owner, repo } = context.repo;
            let headSha = isPR ? context.payload.pull_request.head.sha : '${{ steps.findpr.outputs.sha }}';
            if (!headSha) {
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              headSha = pr.head.sha;
            }
            if (!headSha) { core.info('No head SHA; not starting check.'); return; }
            const res = await github.rest.checks.create({
              owner, repo,
              name: 'PR Build Preview',
              head_sha: headSha,
              status: 'in_progress',
              output: { title: 'MSR Preview', summary: 'Building preview…' }
            });
            core.setOutput('check_id', String(res.data.id));

      - uses: actions/checkout@v4
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || steps.findpr.outputs.branch || 'main' }}

      - uses: actions/setup-node@v4
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        with:
          node-version: "lts/*"
          cache: "npm"

      - run: npm ci
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}

      - name: Canonicalize data (sanity)
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        run: npm run canonicalize

      - name: Validate dataset
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        run: npm run validate

      - run: npm run build   # produces ./build
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}

      - name: Verify build output exists
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        run: |
          if [ ! -d build ]; then
            echo "::error::No build/ output directory found after 'npm run build'.";
            echo "Contents of repo root:";
            ls -la;
            echo "\nLikely build output directories in top 2 levels:";
            find . -maxdepth 2 -type d -name "*dist*" -o -name "*build*" -o -name "*public*";
            exit 1;
          fi

      - name: Deploy PR preview to gh-pages/pr/<PR#>
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          destination_dir: pr/${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.findpr.outputs.number }}
          keep_files: true

      - name: Comment preview URL on PR
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: msr-preview
          number: ${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.findpr.outputs.number }}
          message: |
            # Review link
            [MSR Build Preview](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr/${{ github.event_name == 'pull_request' && github.event.pull_request.number || steps.findpr.outputs.number }}/)
            _This link updates on new commits to this PR._ 

      - name: Publish PR Check (Preview link)
        if: ${{ github.event_name == 'pull_request' || steps.findpr.outputs.number != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = context.eventName === 'pull_request';
            const prNumber = isPR ? context.payload.pull_request.number : Number('${{ steps.findpr.outputs.number }}');
            if (!prNumber) { core.info('No PR number; skipping check update.'); return; }
            const { owner, repo } = context.repo;
            let headSha = isPR ? context.payload.pull_request.head.sha : '${{ steps.findpr.outputs.sha }}';
            if (!headSha) {
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              headSha = pr.head.sha;
            }
            if (!headSha) { core.info('No head SHA; skipping check update.'); return; }

            const url = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr/${prNumber}/`;

            // 1) Update the in-progress check to success
            const checkId = Number('${{ steps.start_check.outputs.check_id }}');
            if (checkId) {
              await github.rest.checks.update({
                owner, repo, check_run_id: checkId,
                status: 'completed',
                conclusion: 'success',
                details_url: url,
                output: {
                  title: 'MSR Preview',
                  summary: `Preview deployed for PR #${prNumber}.`,
                  text: `Open the preview: ${url}`
                }
              });
            } else {
              // Fallback: create a one-shot completed check if start step didn't run
              await github.rest.checks.create({
                owner, repo,
                name: 'PR Build Preview',
                head_sha: headSha,
                status: 'completed',
                conclusion: 'success',
                details_url: url,
                output: {
                  title: 'MSR Preview',
                  summary: `Preview deployed for PR #${prNumber}.`,
                  text: `Open the preview: ${url}`
                }
              });
            }

            // 2) Also set a classic commit status for branch protection compatibility
            try {
              await github.rest.repos.createCommitStatus({
                owner, repo,
                sha: headSha,
                state: 'success',
                target_url: url,
                context: 'MSR Preview',
                description: `Deployed preview for PR #${prNumber}`
              });
            } catch (e) {
              core.warning('Unable to set commit status (MSR Preview): ' + (e?.message || e));
            }