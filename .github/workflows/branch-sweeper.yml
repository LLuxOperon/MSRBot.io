name: Branch Sweeper

on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run mode (check to simulate deletions only)"
        type: boolean
        default: false
      days_old:
        description: 'Only delete branches older than this many days'
        required: false
        default: '30'
      ignore_age:
        description: "Ignore age threshold (delete regardless of last commit date)"
        type: boolean
        default: false

jobs:
  sweep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v7
        with:
          script: |
            const inputDry = core.getInput('dry_run');
            const inputDays = core.getInput('days_old');
            const inputIgnoreAge = core.getInput('ignore_age');
            const DRY = inputDry ? inputDry === 'true' : false; // default to HARD DELETE on schedule
            const daysOld = inputDays ? parseInt(inputDays, 10) : 30;
            const IGNORE_AGE = inputIgnoreAge ? inputIgnoreAge === 'true' : false;
            const cutoffMs = Date.now() - daysOld * 24 * 60 * 60 * 1000;

            const { owner, repo } = context.repo;
            const { data: repoInfo } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoInfo.default_branch;

            async function run() {
              let page = 1;
              const per_page = 100;
              while (true) {
                const { data: branches } = await github.rest.repos.listBranches({
                  owner, repo, protected: false, per_page, page
                });
                if (!branches.length) break;

                for (const b of branches) {
                  const name = b.name;

                  // Skip protected/default branches
                  if (name === defaultBranch || name === 'main' || name === 'master' || name === 'gh-pages') continue;

                  const { data: commit } = await github.rest.repos.getCommit({ owner, repo, ref: b.commit.sha });
                  const commitDate = new Date(commit.commit.committer.date).getTime();
                  if (!IGNORE_AGE && daysOld > 0 && commitDate > cutoffMs) continue; // still fresh

                  if (DRY) {
                    core.info(`Would delete branch: ${name}`);
                  } else {
                    await github.rest.git.deleteRef({ owner, repo, ref: `heads/${name}` });
                    core.info(`Deleted branch: ${name}`);
                  }
                }
                page++;
              }
            }

            run().catch(error => core.setFailed(error.message));