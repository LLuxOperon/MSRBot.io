name: Branch Sweeper

on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run mode (check to simulate deletions only)"
        type: boolean
        default: false
      days_old:
        description: 'Only delete branches older than this many days'
        required: false
        default: '30'
      ignore_age:
        description: "Ignore age threshold (delete regardless of last commit date)"
        type: boolean
        default: false
      include_chore:
        description: "Include chore/ branches in manual runs"
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: read

jobs:
  sweep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v7
        with:
          script: |
            const isDispatch = context.eventName === 'workflow_dispatch';
            const inputs = isDispatch ? (context.payload.inputs || {}) : {};
            const DRY = isDispatch ? String(inputs.dry_run || '').toLowerCase() === 'true' : false; // scheduled default: hard delete
            const IGNORE_AGE = isDispatch ? String(inputs.ignore_age || '').toLowerCase() === 'true' : false;
            const daysOld = isDispatch ? parseInt(String(inputs.days_old || '30'), 10) : 30;
            core.startGroup('Inputs Debug');
            core.info(`event: ${context.eventName}`);
            core.info(`inputs.raw: ${JSON.stringify(inputs)}`);
            core.info(`DRY=${DRY}, IGNORE_AGE=${IGNORE_AGE}, daysOld=${daysOld}`);
            core.endGroup();
            const cutoffMs = Date.now() - daysOld * 24 * 60 * 60 * 1000;

            const { owner, repo } = context.repo;
            const { data: repoInfo } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoInfo.default_branch;

            const protectedNames = new Set([defaultBranch, 'main', 'master', 'gh-pages']);
            const includePrefixes = ['chore/', 'issues/', 'feature/', 'fix/', 'hotfix/', 'release/'];
            const includeChore = isDispatch ? String(inputs.include_chore || '').toLowerCase() === 'true' : false;
            const excludePrefixes = includeChore ? [] : ['chore/'];

            const wouldDelete = [];
            const deleted = [];
            const skippedPR = [];
            const skippedYoung = [];

            let page = 1;
            const per_page = 100;
            while (true) {
              const { data: branches } = await github.rest.repos.listBranches({ owner, repo, protected: false, per_page, page });
              if (!branches.length) break;

              for (const b of branches) {
                const name = b.name;

                // Skip protected/default branches
                if (protectedNames.has(name)) continue;
                // Skip branches that match excluded prefixes
                if (excludePrefixes.some(p => name.startsWith(p))) continue;
                // Skip branches that don't match our prefixes
                if (!includePrefixes.some(p => name.startsWith(p))) continue;

                // Skip if there is an open PR for this branch
                const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', head: `${owner}:${name}` });
                if (prs.length) { skippedPR.push(name); continue; }

                // Age check
                const { data: commit } = await github.rest.repos.getCommit({ owner, repo, ref: b.commit.sha });
                const commitDate = new Date(commit.commit.committer.date).getTime();
                if (!IGNORE_AGE && daysOld > 0 && commitDate > cutoffMs) { skippedYoung.push(name); continue; }

                if (DRY) {
                  core.info(`‚úÖ DRY-RUN ‚Äî would delete: ${name}`);
                  wouldDelete.push(name);
                } else {
                  try {
                    await github.rest.git.deleteRef({ owner, repo, ref: `heads/${name}` });
                    core.info(`üóëÔ∏è Deleted: ${name}`);
                    deleted.push(name);
                  } catch (err) {
                    core.warning(`Failed to delete ${name}: ${err.message}`);
                  }
                }
              }
              page++;
            }

            // Summary output
            core.startGroup('Branch Sweeper Summary');
            core.info(`DRY-RUN: ${DRY}`);
            core.info(`Ignored age threshold: ${IGNORE_AGE}`);
            core.info(`Days old threshold: ${daysOld}`);
            core.info(`Would delete (${wouldDelete.length}): ${wouldDelete.join(', ') || '‚Äî'}`);
            core.info(`Deleted (${deleted.length}): ${deleted.join(', ') || '‚Äî'}`);
            core.info(`Skipped (open PR) (${skippedPR.length}): ${skippedPR.join(', ') || '‚Äî'}`);
            core.info(`Skipped (too recent) (${skippedYoung.length}): ${skippedYoung.join(', ') || '‚Äî'}`);
            core.endGroup();