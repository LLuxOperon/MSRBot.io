name: Branch Sweeper

on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode'
        required: false
        default: 'true'
      days_old:
        description: 'Only delete branches older than this many days'
        required: false
        default: '30'
      ignore_age:
        description: "Ignore age threshold (delete regardless of last commit date)"
        type: boolean
        default: false

jobs:
  sweep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const github = require('@actions/github');

            const inputDry = core.getInput('dry_run');
            const inputDays = core.getInput('days_old');
            const inputIgnoreAge = core.getInput('ignore_age');
            const DRY = inputDry ? inputDry === 'true' : false; // default to HARD DELETE on schedule
            const daysOld = inputDays ? parseInt(inputDays, 10) : 30;
            const IGNORE_AGE = inputIgnoreAge ? inputIgnoreAge === 'true' : false;
            const cutoffMs = Date.now() - daysOld * 24 * 60 * 60 * 1000;

            async function run() {
              const repo = github.context.repo;
              const branches = await github.rest.repos.listBranches({
                owner: repo.owner,
                repo: repo.repo,
                protected: false,
                per_page: 100,
              });

              for (const branch of branches.data) {
                if (branch.name === 'main' || branch.name === 'master') continue;

                const commitDate = new Date(branch.commit.committer.date).getTime();
                if (!IGNORE_AGE && daysOld > 0 && commitDate > cutoffMs) continue; // still fresh

                if (DRY) {
                  core.info(`✅ Would delete branch: ${branch.name}`);
                } else {
                  await github.rest.git.deleteRef({
                    owner: repo.owner,
                    repo: repo.repo,
                    ref: `heads/${branch.name}`
                  });
                  core.info(`🗑️ Deleted branch: ${branch.name}`);
                }
              }
            }

            run().catch(error => core.setFailed(error.message));