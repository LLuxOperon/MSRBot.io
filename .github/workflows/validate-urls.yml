name: Validate Document URLs

on:
  workflow_run:
    workflows: ["Build MSR Site and Test"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

concurrency:
  group: validate-urls
  cancel-in-progress: true

jobs:
  validate-urls:
    if: 
      github.event_name != 'workflow_run' || 
      github.event.workflow_run.conclusion == 'success'
    name: Validate URLs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run URL validation
        run: npm run validate-url

      - name: Upload validation report (if exists)
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: url-validation-report
          path: src/main/reports/url_validate_audit.json
          if-no-files-found: ignore

      - name: Read redirectUndefinedCount from audit
        id: audit
        if: success() || failure()
        run: |
          if [ ! -f src/main/reports/url_validate_audit.json ]; then
            echo "redirect_undefined=0" >> $GITHUB_OUTPUT
            echo "redirectUndefinedCount=0"
            exit 0
          fi
          RU=$(jq -r '.index.redirectBreakdown.undefined // 0' src/main/reports/url_validate_audit.json)
          echo "redirect_undefined=$RU" >> $GITHUB_OUTPUT
          echo "redirectUndefinedCount=$RU"

      - name: Auto-commit audit back to main (if changed)
        if: success() || failure()
        run: |
          set -e
          BR="${{ github.event.repository.default_branch }}"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add src/main/reports/url_validate_audit.json || true
          if git diff --cached --quiet; then
            echo "No audit changes to commit.";
            exit 0;
          fi
          git commit -m "chore: url validation audit update"
          git push origin HEAD:"$BR"
          echo "✅ Committed url_validate_audit.json to ${BR}"

      - name: Sync to latest base after audit push
        run: |
          git fetch origin
          git checkout ${{ github.event.repository.default_branch }}
          git reset --hard origin/${{ github.event.repository.default_branch }}

      - name: Run URL normalizer (apply) for missing resolved*
        if: steps.audit.outputs.redirect_undefined != '0'
        run: |
          node src/main/scripts/url.normalize.js --apply

      - name: Read normalize applied count
        id: norm
        if: steps.audit.outputs.redirect_undefined != '0'
        run: |
          if [ -f src/main/reports/url_validate_normalize.json ]; then
            APPLIED=$(jq -r '.applied // 0' src/main/reports/url_validate_normalize.json)
          else
            APPLIED=0
          fi
          echo "applied=$APPLIED" >> $GITHUB_OUTPUT
          echo "normalizeApplied=$APPLIED"

      - name: Validate documents.json
        if: steps.norm.outputs.applied != '0'
        run: npm run validate

      - name: Canonicalize documents.json
        if: steps.norm.outputs.applied != '0'
        env:
          IS_PR_RUN: true
          PR_LOG_PATH: ${{ runner.temp }}/pr-log.log
        run: npm run canonicalize

      - name: Commit canonicalized documents.json
        if: steps.norm.outputs.applied != '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add src/main/data/documents.json
          if git diff --cached --quiet; then
            echo "No canonicalized changes to commit."
            exit 0
          fi
          git commit -m "Canonicalize documents.json after normalize"

      - name: Create PR for normalized URLs
        if: steps.norm.outputs.applied != '0' && github.ref != 'refs/heads/chore/url-normalize'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'fix: backfill resolved* from URL validation (missing resolved)'
          title: "Backfill resolved* for ${{ steps.audit.outputs.redirect_undefined }} entries"
          body: |
            This PR backfills resolved* fields for entries missing them based on the URL validation audit.
            - Source: src/main/reports/url_validate_audit.json
            - Script: src/main/scripts/url.normalize.js --apply
            - Detected missing resolved*: ${{ steps.audit.outputs.redirect_undefined }}
            - Applied backfills: ${{ steps.norm.outputs.applied }}
          branch: chore/url-normalize
          base: ${{ github.event.repository.default_branch }}
          delete-branch: true
          add-paths: |
            src/main/data/documents.json
            src/main/reports/url_validate_normalize.json

      - name: Upsert URL issues 
        if: success() || failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const auditPath = path.join(process.cwd(), 'src', 'main', 'reports', 'url_validate_audit.json');

            if (!fs.existsSync(auditPath)) {
              core.info('No audit file found; skipping issue upsert.');
              return;
            }

            const audit = JSON.parse(fs.readFileSync(auditPath, 'utf8'));
            const genAt = audit.generatedAt || new Date().toISOString();
            const runTag = `Run #${context.runId}`;

            const unr = (audit.report && audit.report.unreachable) || {};
            const list404 = Array.isArray(unr['404']) ? unr['404'] : [];
            const list400 = Array.isArray(unr['400']) ? unr['400'] : [];

            // Build current state: 404 by publisher, 400 by docId
            const byPub404 = new Map(); // pub -> array of entries
            for (const item of list404) {
              const pub = (item.publisher || 'Unknown').trim();
              if (!byPub404.has(pub)) byPub404.set(pub, []);
              byPub404.get(pub).push(item);
            }
            const current400 = new Set(list400.map(i => i.docId));

            // Helper: list all open issues with label
            async function listOpenWithLabel(label) {
              const issues = await github.paginate(github.rest.issues.listForRepo, {
                owner, repo, state: 'open', labels: label, per_page: 100
              });
              // Exclude PRs (listForRepo returns both)
              return issues.filter(i => !i.pull_request);
            }

            // Helper: create or update issue
            async function upsertIssue({title, body, labels}) {
              // Search open issues by exact title
              const openIssues = await github.paginate(github.rest.issues.listForRepo, {
                owner, repo, state: 'open', per_page: 100
              });
              const found = openIssues.find(i => i.title === title && !i.pull_request);
              if (found) {
                await github.rest.issues.update({ owner, repo, issue_number: found.number, body, labels });
                return found.number;
              } else {
                const created = await github.rest.issues.create({ owner, repo, title, body, labels });
                return created.data.number;
              }
            }

            // Upsert 404-by-publisher issues
            for (const [pub, arr] of byPub404.entries()) {
              const title = `URL ERROR (404): ${pub}`;
              // Compact, deterministic body
              const lines = arr
                .sort((a,b) => (a.docId || '').localeCompare(b.docId || ''))
                .map(i => `- ${i.docId} — ${i.field} — ${i.url}`);
              const body = [
                `**Count:** ${arr.length}`,
                '',
                ...lines,
                '',
                `_Created automatically from URL validation audit on ${genAt} — ${runTag}_`
              ].join('\n');
              await upsertIssue({ title, body, labels: ['automated', 'url-404'] });
            }

            // Upsert 400-per-item issues
            for (const i of list400) {
              const title = `URL ERROR (400): ${i.docId}`;
              const body = [
                `**Doc:** ${i.docId}`,
                `**Field:** ${i.field}`,
                `**URL:** ${i.url}`,
                '',
                `_Created automatically from URL validation audit on ${genAt} — ${runTag}_`
              ].join('\n');
              await upsertIssue({ title, body, labels: ['automated', 'url-400'] });
            }

            // Autoclose resolved issues
            // 404s: close any publisher issue not in current set
            const open404 = await listOpenWithLabel('url-404');
            const livePubs = new Set([...byPub404.keys()]);
            for (const iss of open404) {
              const m = /^URL ERROR \(404\): (.+)$/.exec(iss.title || '');
              const pub = m && m[1] ? m[1].trim() : null;
              if (!pub || !livePubs.has(pub)) {
                await github.rest.issues.createComment({
                  owner, repo, issue_number: iss.number,
                  body: `Resolved: no outstanding 404s for this publisher. ${runTag}. Closing.`
                });
                await github.rest.issues.update({ owner, repo, issue_number: iss.number, state: 'closed' });
              }
            }

            // 400s: close any docId issue not in current set
            const open400 = await listOpenWithLabel('url-400');
            for (const iss of open400) {
              const m = /^URL ERROR \(400\): (.+)$/.exec(iss.title || '');
              const docId = m && m[1] ? m[1].trim() : null;
              if (!docId || !current400.has(docId)) {
                await github.rest.issues.createComment({
                  owner, repo, issue_number: iss.number,
                  body: `Resolved: no longer present as 400. ${runTag}. Closing.`
                });
                await github.rest.issues.update({ owner, repo, issue_number: iss.number, state: 'closed' });
              }
            }

            core.info('Issue upsert/close pass complete.');